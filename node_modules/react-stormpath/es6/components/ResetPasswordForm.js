'use strict';

var _dec, _class;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMixin = require('react-mixin');

var _reactMixin2 = _interopRequireDefault(_reactMixin);

var _reactRouter = require('react-router');

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _LoginLink = require('../components/LoginLink');

var _LoginLink2 = _interopRequireDefault(_LoginLink);

var _UserActions = require('../actions/UserActions');

var _UserActions2 = _interopRequireDefault(_UserActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultResetPasswordForm = (function (_React$Component) {
  _inherits(DefaultResetPasswordForm, _React$Component);

  function DefaultResetPasswordForm() {
    _classCallCheck(this, DefaultResetPasswordForm);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(DefaultResetPasswordForm).apply(this, arguments));
  }

  _createClass(DefaultResetPasswordForm, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        ResetPasswordForm,
        this.props,
        _react2.default.createElement(
          'div',
          { className: 'sp-reset-password-form' },
          _react2.default.createElement(
            'div',
            { className: 'row' },
            _react2.default.createElement(
              'div',
              { className: 'col-sm-offset-4 col-xs-12 col-sm-4', spIf: 'form.sent' },
              _react2.default.createElement(
                'p',
                { className: 'alert alert-success' },
                'We have sent a password reset link to the email address of the account that you specified. Please check your email for this message, then click on the link.'
              ),
              _react2.default.createElement(
                'p',
                { className: 'pull-right' },
                _react2.default.createElement(
                  _LoginLink2.default,
                  null,
                  'Back to Login'
                )
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'col-xs-12', spIf: '!form.sent' },
              _react2.default.createElement(
                'div',
                { className: 'form-horizontal' },
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement(
                    'label',
                    { htmlFor: 'spEmail', className: 'col-xs-12 col-sm-4 control-label' },
                    'Email or Username'
                  ),
                  _react2.default.createElement(
                    'div',
                    { className: 'col-xs-12 col-sm-4' },
                    _react2.default.createElement('input', { className: 'form-control', id: 'spEmail', name: 'email', placeholder: 'Your Email Address' })
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement(
                    'div',
                    { className: 'col-sm-offset-4 col-xs-12' },
                    _react2.default.createElement(
                      'p',
                      { spIf: 'form.error' },
                      _react2.default.createElement('span', { spBind: 'form.errorMessage' })
                    ),
                    _react2.default.createElement(
                      'button',
                      { type: 'submit', className: 'btn btn-primary' },
                      'Request Password Reset'
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return DefaultResetPasswordForm;
})(_react2.default.Component);

var ResetPasswordForm = (_dec = _reactMixin2.default.decorate(_reactRouter.History), _dec(_class = (function (_React$Component2) {
  _inherits(ResetPasswordForm, _React$Component2);

  function ResetPasswordForm() {
    var _Object$getPrototypeO;

    var _temp, _this2, _ret;

    _classCallCheck(this, ResetPasswordForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(ResetPasswordForm)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this2), _this2.state = {
      fields: {
        email: ''
      },
      errorMessage: null,
      isFormProcessing: false,
      isFormSent: false
    }, _temp), _possibleConstructorReturn(_this2, _ret);
  }

  _createClass(ResetPasswordForm, [{
    key: 'onFormSubmit',
    value: function onFormSubmit(e) {
      var _this3 = this;

      e.preventDefault();

      var next = function next(err, data) {
        if (err) {
          return _this3.setState({
            isFormProcessing: false,
            errorMessage: err.message
          });
        }

        // If the user didn't specify any data,
        // then simply default to what we have in state.
        data = data || _this3.state.fields;

        _UserActions2.default.forgotPassword(_this3.state.fields, function (err) {
          if (err) {
            _this3.setState({
              isFormProcessing: false,
              errorMessage: err.message
            });
          } else {
            _this3.setState({
              isFormSent: true,
              isFormProcessing: false,
              errorMessage: null
            });
          }
        });
      };

      this.setState({
        isFormProcessing: true
      });

      if (this.props.onSubmit) {
        e.data = this.state.fields;
        this.props.onSubmit(e, next);
      } else {
        next(null, this.state.fields);
      }
    }
  }, {
    key: '_mapFormFieldHandler',
    value: function _mapFormFieldHandler(element, tryMapField) {
      if (element.type === 'input' || element.type === 'textarea') {
        if (element.props.type !== 'submit') {
          switch (element.props.name) {
            case 'email':
              tryMapField('email');
              break;
          }
        }
      }
    }
  }, {
    key: '_spIfHandler',
    value: function _spIfHandler(action, element) {
      var test = null;

      switch (action) {
        case 'form.processing':
          test = this.state.isFormProcessing;
          break;
        case 'form.sent':
          test = this.state.isFormSent;
          break;
        case 'form.error':
          test = this.state.errorMessage !== null;
          break;
      }

      return test;
    }
  }, {
    key: '_spBindHandler',
    value: function _spBindHandler(action, element) {
      var element = false;

      switch (action) {
        case 'form.errorMessage':
          var className = element.props ? element.props.className : undefined;
          element = _react2.default.createElement(
            'span',
            { className: className },
            this.state.errorMessage
          );
          break;
      }

      return element;
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.children) {
        return _react2.default.createElement(
          'form',
          { onSubmit: this.onFormSubmit.bind(this) },
          _utils2.default.makeForm(this, this._mapFormFieldHandler.bind(this), this._spIfHandler.bind(this), this._spBindHandler.bind(this))
        );
      } else {
        return _react2.default.createElement(DefaultResetPasswordForm, this.props);
      }
    }
  }]);

  return ResetPasswordForm;
})(_react2.default.Component)) || _class);
exports.default = ResetPasswordForm;